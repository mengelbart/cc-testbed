- # Variable Available Capacity with a Single Flow
  emulation:
    name: VariableAvailableCapacity
    module: variable_available_capacity
    config:
      loss: [0, 0.1, 0.5, 1.0, 2.0, 5.0]
      delay: [0, 50, 100, 150]
      latency: [300]
  flows:
    - name: RTPoverQUIC
      module: rtp_over_quic_go
      server_node: l0
      receiver_node: r0
      delay: 0
      config:
        codec: ['h264']
        stream: [True, False]
        transport: 
          - protocol: 'quic'
            cc: 'reno'
            stream: True
          - protocol: 'quic'
            cc: 'reno'
            stream: False
          - protocol: 'quic'
            cc: 'none'
          - protocol: 'udp'
            cc: 'none'
        rtp_cc:
          - rtp_cc: 'scream'
            rtcp_feedback: 'rfc8888'
            local_rfc8888: False
          - rtp_cc: 'scream'
            rtcp_feedback: 'none'
            local_rfc8888: True
        sender_config:
          input: input/input.y4m

- # Variable Available Capacity with Multiple Flows
  emulation:
    name: VariableAvailableCapacity
    module: variable_available_capacity
    config:
      loss: [0, 0.1, 0.5, 1.0, 2.0, 5.0]
      delay: [0, 50, 100, 150]
      latency: [300]
  flows:
    - name: RTPoverQUIC
      module: rtp_over_quic_go
      server_node: l0
      receiver_node: r0
      delay: 0
      config:
        codec: ['h264']
        stream: [False]
        transport: 
          - protocol: 'quic'
            cc: 'reno'
            stream: True
          - protocol: 'quic'
            cc: 'reno'
            stream: False
          - protocol: 'quic'
            cc: 'none'
          - protocol: 'udp'
            cc: 'none'
        rtp_cc:
          - rtp_cc: 'scream'
            rtcp_feedback: 'rfc8888'
            local_rfc8888: False
          - rtp_cc: 'scream'
            rtcp_feedback: 'none'
            local_rfc8888: True
        sender_config:
          input: input/input.y4m
    - name: RTPoverQUIC
      module: rtp_over_quic_go
      server_node: l1
      receiver_node: r1
      delay: 0
      config:
        codec: ['h264']
        stream: [False]
        transport: 
          - protocol: 'quic'
            cc: 'reno'
            stream: True
          - protocol: 'quic'
            cc: 'reno'
            stream: False
          - protocol: 'quic'
            cc: 'none'
          - protocol: 'udp'
            cc: 'none'
        rtp_cc:
          - rtp_cc: 'scream'
            rtcp_feedback: 'rfc8888'
            local_rfc8888: False
          - rtp_cc: 'scream'
            rtcp_feedback: 'none'
            local_rfc8888: True
        sender_config:
          input: input/input.y4m

- # Congested Feedback Link with Bi-directional Media Flows
  emulation:
    name: VariableAvailableCapacity
    module: variable_available_capacity
    config:
      loss: [0, 0.1, 0.5, 1.0, 2.0, 5.0]
      delay: [0, 50, 100, 150]
      latency: [300]
  flows:
    - name: RTPoverQUIC
      module: rtp_over_quic_go
      server_node: l0
      receiver_node: r0
      delay: 0
      config:
        codec: ['h264']
        stream: [False]
        transport: 
          - protocol: 'quic'
            cc: 'reno'
            stream: True
          - protocol: 'quic'
            cc: 'reno'
            stream: False
          - protocol: 'quic'
            cc: 'none'
          - protocol: 'udp'
            cc: 'none'
        rtp_cc:
          - rtp_cc: 'scream'
            rtcp_feedback: 'rfc8888'
            local_rfc8888: False
          - rtp_cc: 'scream'
            rtcp_feedback: 'none'
            local_rfc8888: True
        sender_config:
          input: input/input.y4m
    - name: RTPoverQUIC
      module: rtp_over_quic_go
      server_node: r1
      receiver_node: l1
      delay: 0
      config:
        codec: ['h264']
        stream: [False]
        transport: 
          - protocol: 'quic'
            cc: 'reno'
            stream: True
          - protocol: 'quic'
            cc: 'reno'
            stream: False
          - protocol: 'quic'
            cc: 'none'
          - protocol: 'udp'
            cc: 'none'
        rtp_cc:
          - rtp_cc: 'scream'
            rtcp_feedback: 'rfc8888'
            local_rfc8888: False
          - rtp_cc: 'scream'
            rtcp_feedback: 'none'
            local_rfc8888: True
        sender_config:
          input: input/input.y4m

- # Media Flow Competing with a Long TCP Flow
  emulation:
    name: VariableAvailableCapacity
    module: variable_available_capacity
    config:
      loss: [0, 0.1, 0.5, 1.0, 2.0, 5.0]
      delay: [0, 50, 100, 150]
      latency: [300]
  flows:
    - name: RTPoverQUIC
      module: rtp_over_quic_go
      server_node: l0
      receiver_node: r0
      delay: 0
      config:
        codec: ['h264']
        stream: [False]
        transport: 
          - protocol: 'quic'
            cc: 'reno'
            stream: True
          - protocol: 'quic'
            cc: 'reno'
            stream: False
          - protocol: 'quic'
            cc: 'none'
          - protocol: 'udp'
            cc: 'none'
        rtp_cc:
          - rtp_cc: 'scream'
            rtcp_feedback: 'rfc8888'
            local_rfc8888: False
          - rtp_cc: 'scream'
            rtcp_feedback: 'none'
            local_rfc8888: True
        sender_config:
          input: input/input.y4m
    - name: Iperf3
      module: iperf3
      server_node: l1
      receiver_node: r1
      delay: 0
      config:
        congestion_control_algorithm: [reno, cubic, bbr]
        duration: 100
